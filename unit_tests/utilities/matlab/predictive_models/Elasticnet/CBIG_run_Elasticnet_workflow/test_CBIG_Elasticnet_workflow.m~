classdef test_CBIG_Elasticnet_workflow < matlab.unittest.TestCase
% Written by Leon Ooi and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
    
    
    methods (Test)
        function test_basic( TestCase )
            params.gpso_dir = fullfile(getenv('CBIG_CODE_DIR'), 'external_packages', 'matlab', ...
            'non_default_packages', 'Gaussian_Process');
            params.glmnet_dir = fullfile(getenv('CBIG_CODE_DIR'), 'external_packages', 'matlab', ...
            'non_default_packages', 'glmnet', 'glmnet_matlab');
            
            parent_dir = fullfile(getenv('CBIG_CODE_DIR'), 'unit_tests', 'utilities', 'matlab', ...
                'predictive_models', 'LinearRidgeRegression', 'CBIG_LRR_workflow_1measure');
            input_dir = fullfile(parent_dir, 'input', 'test_basic');
            load(fullfile(input_dir, 'no_relative_5_fold_sub_list.mat'))
            load(fullfile(input_dir, 'y.mat'))
            load(fullfile(input_dir, 'covariates.mat'))
            load(fullfile(input_dir, 'RSFC.mat'))
            
            params.sub_fold = sub_fold;
            params.FC_mat = corr_mat;
            params.y = y;
            params.covariates = covariates;
            params.num_innerfolds = length(params.sub_fold);
            params.outdir = fullfile(parent_dir, 'output', 'test_basic');
            params.outstem = 'unit_test';
            params.domain = [0.001 0.1; 3 8];
            params.eval = 5;
            params.tree = 2;
            
            if(exist(params.outdir, 'dir'))
                rmdir(params.outdir, 's')
            end
            mkdir(params.outdir)
            
            CBIG_LRR_workflow_1measure( params );
            
            ref_dir = fullfile(parent_dir, 'ref_output', 'test_basic');
            ref = load(fullfile(ref_dir, 'results', 'optimal_acc', '1cog.mat'));
            test = load(fullfile(params.outdir, 'results', 'optimal_acc', '1cog.mat'));
            fields = fieldnames(ref);
            
            for i = 1:length(fields)
                if (~isequal(fields{i}, 'y_predict'))
                    curr_ref = getfield(ref, fields{i});
                    curr_test = getfield(test, fields{i});
                    
                    assert(isequal(size(curr_test),size(curr_ref)), ...
                        sprintf('field %s is of wrong size.', fields{i}));
                    assert(max(abs((curr_test(:) - curr_ref(:)))) < 1e-10, ...
                        sprintf('field %s is different from reference result.', fields{i}));
                else
                    for j = 1:length(ref.y_predict)
                        curr_ref = ref.y_predict{j};
                        curr_test = test.y_predict{j};
                        
                        assert(isequal(size(curr_test),size(curr_ref)), ...
                            sprintf('%d -th array of field y_predict is of wrong size.', j));
                        assert(max(abs((curr_test(:) - curr_ref(:)))) < 1e-10, ...
                            sprintf('%d -th array of field y_predict is different from reference result.', j));
                    end
                end
            end
        end
        
        function test_no_fs
        end
        
        
    end
    
    
end